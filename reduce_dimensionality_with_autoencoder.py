# -*- coding: utf-8 -*-
"""reduce dimensionality with autoencoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KugQGYWzB6nB2n8KN1gGI3It3qgVNctN

"""

"""Autoencoder:"""

import pandas as pd
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from scipy.io import loadmat

from sklearn.model_selection import train_test_split
from tensorflow.keras.layers import Input, Flatten, Dense, Reshape
from tensorflow.keras import losses, utils
from tensorflow.keras.models import Model

"""Data pre-processing:"""

file = loadmat('/content/drive/MyDrive/spike_data.mat')
data = file['wf']
data_concat = data[0][0]
for i in range(0, 96):
  for j in range(0, 5):
    if not(i==0 and j==0):
      data_concat = np.append(data_concat, data[i][j], axis=0)

x_train_raw, x_test_raw = train_test_split(data_concat, test_size=0.3)
x_train_raw = x_train_raw.astype('float32')
x_test_raw = x_test_raw.astype('float32')

x_train = utils.normalize(x_train_raw, axis=0)
x_test = utils.normalize(x_test_raw, axis=0)

"""Model:"""

def build():
  raw_data = Input(shape=64)

  # Encoder
  encoded = Dense(2, activation='relu')(raw_data)

  # Decoder
  decoded = Dense(64, activation='sigmoid')(encoded)

  model = tf.keras.Model(inputs=raw_data, outputs=decoded)

  return model


autoencoder = build()

autoencoder.compile(optimizer='adam', loss=losses.MeanSquaredError())

autoencoder.summary()

"""Train:"""

autoencoder.fit(x_train, x_train,
                batch_size=320,
                epochs=10,
                shuffle=True,
                validation_data=(x_test, x_test)
                )

x_predict = autoencoder.predict(x_test)

"""Plot:"""

fig = plt.figure(figsize=(30,10))
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)
ax1.set_title('x_test')
ax2.set_title('x_predict')

x = np.arange(0, 64)
for i in range(200):
  y1 = x_test[i]
  y2 = x_predict[i]
  ax1.plot(x, y1, c = 'r', marker = '.')
  ax2.plot(x, y2, c = 'b', marker = '.')

plt.show()